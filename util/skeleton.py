from tkinter import Tk, Menu
from tkinter.ttk import Style
from widgets import *

## Controller classes ##
class NotebadApp(Tk):
    def __init__(self):
        super().__init__(self)
        self.view         = NotebadView(self)
        self.file_system  = FileManagement(self, self.view)     
        self.language     = LanguageTools(self, self.view)
        self.utilities    = Utilities(self, self.view)
        self.key_bindings = KeyBindings(self, self.view) 
        self.events_master()

    def events_master(self) -> None: ...
    def exit_app(self) -> None: ...
    def run(self) -> None: ...
    def build_profiler_source(self, event) -> str: ...
    def load_language(self, language:str) -> None: ...
    def parse_progress_profiler(self, event) -> None: ...
    def populate_key_commands(self, event) -> None: ...

class FileManagement:
    def __init__(self, app, view):
        self.app = app
        self.view = view

    def new_file(self, event=None) -> None: ...
    def open_recent_file(self, event): ...
    def open_file(self, event=None, full_path:str=None) -> None: ...
    def save_file(self, event=None, ide=None) -> None: ...
    def save_file_as(self, event=None, ide=None) -> None: ...
    def parts_from_file_path(self, full_path:str) -> dict: ...
    def write_file_to_textbox(self, full_path:str, ide) -> None: ...
    def write_textbox_to_file(self, full_path:str, ide) -> None: ...
    def _add_recent_file(self, full_path:str) -> None: ...

class LanguageTools:
    def __init__(self, app, view):
        self.app = app
        self.view = view
        self.current_language = None
        self.model = LanguageModel()

    def load_language(self, lang:str) -> None: ...
    def static_syntax_formatting(self, file_txt=None, expand=None, upper=None, indent=None) -> None: ...
    def dynamic_syntax_formatting(self, event) -> None: ...

class KeyBindings:
    def __init__(self, app, view):
        self.app  = app
        self.view = view
        # Holds all the key bindings
        self.binder = []
        self.user_binder = []

        self._load_user_settings()
        self._unbindings()
        self._init_no_override_bindings()
        self._syntax_highlighting()
        self._textbox_important_bindings()
        self._assignable_bindings()

    def register_binding(self,name:str, category:str,bind_func:object, key:str, callback:object, widget_class:str=None, active:bool=True, can_override:bool=False,**kwargs): ...
    def _unbindings(self): ...
    def _load_user_settings(self): ...
    def _syntax_highlighting(self): ...
    def _init_no_override_bindings(self): ...
    def _textbox_important_bindings(self): ...
    def _assignable_bindings(self): ...

class Utilities:
    def __init__(self, app, view):
        self.app  = app
        self.view = view

    def eval_selection(self, event=None) -> None: ...
    def open_calculator(self): ...

###
# Language Model
###

class LanguageModel:
    def __init__(self): ...

    def load_language(self, lang:str) -> None: ...
    def build_ast(self, txt:str) -> None: ...
    def get_syntax_token(self, txt:str) -> str: ...
    def format_syntax(self, txt:str, no_nl=False, expand=False, upper=False) -> list: ...
    def expand_syntax(self, token): ...


## View classes ##
class NotebadView(NFrame):
    def __init__(self, root):
        super().__init__(root) 
        self.ui       = Ui(self, root)
        self.tabs     = Tabs(self)
        self.menu     = Menubar(root, view=self, tabs=self.tabs, ui=self.ui)
        self.l_gutter = NFrame(self)
        self.r_gutter = NFrame(self)
        self._setup_and_grid()

    def key_command_window(self): ...
    def open_settings_window(self, *args): ...
    def _setup_and_grid(self) -> None: ...


class Menubar(Menu):
    def __init__(self, root, view, tabs, ui) -> None:
        super().__init__(root, border=0)
        self.view = view
        self.tabs = tabs
        self.ui   = ui
        self._make_menu()

    def _event(self, event, source:NFrame=None):    ...
    def _open_recent_event(self, file): ...
    def _make_menu(self): ...
    def make_recent_file_list(self, event=None): ...


class Tabs(NNotebook):
    def __init__(self, view) -> None:
        super().__init__(view)
        self.view = view
       
    def new_tab(self, tab_style:str, *args, **kwargs) -> None: ...
    def on_close_press(self, event) -> None: ...
    def on_close_release(self, event) -> None: ...
    def close_tab(self, tab_name:str=None) -> None: ...
    def move_to_tab(self, tab_name:str=None) -> None: ...
    def set_tabs_unfocused(self) -> None: ...


class Ui:
    def __init__(self, view, root) -> None:
        self.view = view
        self.style = Style()
        self._init_root_tk_window(root)
        self._init_style()

    def font_size_bump(self, increase=True) -> None: ...
    def change_font(self, font:str): ...
    def toggle_theme(self, reload=False) -> None: ...
    def parse_windows_mousewheel(event, callback=None): ...
    def _init_root_tk_window(self, root: Tk) -> None: ...
    def _init_style(self) -> None: ...


## IDE classes ##
class Ide(NTabFrame):
    def __init__(self, parent):
        super().__init__(self, parent)

        self.text      = NText(self)
        self.editor    = Editor(text=self.text)
        self.clipboard = Clipboard(editor=self.editor, text=self.text)
        self.history   = History(ide=self, editor=self.editor, text=self.text)
        self.toolbar   = Toolbar(ide=self, editor=self.editor, text=self.text)
        self.footer    = TextFooter(parent=self, text=self.text)
    
    def _binds(self) -> None: ...
    def _check_on_key(self, event) -> None: ...
    def _grid(self) -> None: ...
    def _prep_ide(self) -> None: ...
    def _set_theme(self): ...


class Clipboard:
    def __init__(self, editor, text):
        super().__init__(self, editor, text)
        self.editor = editor
        self.text = text
    
    def cut_text(self) -> None: ...
    def copy_text(self) -> None: ...
    def paste_text(self) -> None: ...


class Editor:
    def __init__(self, text) -> None:
        self.text = text

    def add_indent(self) -> None: ...
    def get_current_line_text(self) -> str: ...
    def get_previous_line(self) -> str: ...
    def get_trailing_word_and_index(self) -> tuple: ...
    def get_selection(self) -> str: ...
    def add_newline(self) -> None: ...
    def clear_all(self): ...
    def delete_cur_line(self) -> None: ...
    def delete_line(self) -> None: ...
    def delete_selection(self): ...
    def get_all(self) -> str: ...
    def set_find_case(self, toggle_value): ...
    def find_text(self, find_txt, direction=1): ...
    def find_next(self, direction=1): ...
    def move_line(self, direction): ...
    def duplicate_line(self): ...


class History:
    def __init__(self, ide: NFrame, editor: Editor, text: NText) -> None:
        self.ide    = ide
        self.editor = editor
        self.text   = text

    def stackify(self) -> None: ...
    def undo(self) -> None: ...
    def redo(self) -> None: ...

# Show toolbar on find?
class Toolbar(NFrame):
    def __init__(self, ide, editor: Editor, text: NText):
        super().__init__(ide)
        # Gather IDE objects
        self.ide = ide
        self.editor = editor
        self.text = text

        self._make_find_case_toggle()
        self._make_find_next_buttons()
        self._make_find_entry()
        self._make_find_label()

    def _make_find_case_toggle(self): ...
    def _make_find_next_buttons(self): ...
    def _make_find_entry(self) -> None: ...
    def _make_find_label(self) -> None: ...
    def get_current_text(self, *args): ...
    def find_entry_focus(self, *args): ...
    def find_entry_lose_focus(self, event): ...


class ProgressProfiler(NTabFrame):
    def __init__(self, tab_widget) -> None:
        super().__init__(tab_widget)
        self._build_toolbar()
        self._build_summary_view()

    def load_profiler_data(self, data:dict) -> None: ...
    def _prompt_for_file(self, *_) -> None: ...
    def _build_toolbar(self) -> None: ...
    def _toggle_mode(self, *_) -> None: ...
    def _build_summary_view(self) -> None: ...
    def _build_src_view(self, *_) -> None: ...
    def _set_theme(self, theme: str) -> None: ...



